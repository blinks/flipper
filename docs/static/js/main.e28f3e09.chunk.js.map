{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["RESPONSES","yes","no","ok","STOP","Dialog","props","Card","border","type","Body","Text","children","Footer","ButtonToolbar","className","options","DECK","MG","A","text","B","C","D","E","F","CORP","G","H","J","K","L","M","RD","N","P","Q","R","S","T","CR","U","V","W","X","Y","Z","App","useState","history","setHistory","factionKey","setFactionKey","deckState","setDeckState","card","setCard","index","setIndex","_nextCard","deck","es","i","length","j","Math","floor","random","shuffle","Object","keys","pop","evaluate","inst","choice","bytecode","humanize","console","log","push","inc","Error","_inc","dialog","k","opts","key","Button","variant","onClick","e","factionBtns","map","idx","f","Navbar","bg","Brand","Nav","Link","href","entry","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAaMA,EAAY,CAChBC,IAAK,kBACLC,GAAI,iBACJC,GAAI,qBAMAC,GAAQ,EA6Hd,SAASC,EAAOC,GACd,OACE,eAACC,EAAA,EAAD,CAAMC,OAAQF,EAAMG,MAAQ,YAA5B,UACE,cAACF,EAAA,EAAKG,KAAN,UAAW,cAACH,EAAA,EAAKI,KAAN,UAAYL,EAAMM,aAC7B,cAACL,EAAA,EAAKM,OAAN,UACE,cAACC,EAAA,EAAD,CAAeC,UAAU,0BAAzB,SACGT,EAAMU,eAOjB,IAAMC,EAAO,CACXC,GAAI,CACFC,EAAG,CACD,CAAEC,KAAM,oCACNnB,IAAK,EAAGC,IA/IE,GAgJZ,CAAEkB,KAAM,8DACNnB,IAAK,EAAGC,GAAI,GACd,CAAEkB,KAAM,kDAAmDjB,GAAIC,GAC/D,CAAEgB,KAAM,SAAUjB,GAAIC,IAExBiB,EAAG,CAAC,CAAED,KAAM,SAAUjB,GAAIC,IAC1BkB,EAAG,CAAC,CAAEF,KAAM,SAAUjB,GAAIC,IAC1BmB,EAAG,CAAC,CAAEH,KAAM,UAAWjB,GAAIC,IAC3BoB,EAAG,CAAC,CAAEJ,KAAM,SAAUjB,GAAIC,IAC1BqB,EAAG,CAAC,CAAEL,KAAM,WAAYjB,GAAIC,KAG9BsB,KAAM,CACJC,EAAG,CAAC,CAAEP,KAAM,aAAcjB,GAAIC,IAC9BwB,EAAG,CAAC,CAAER,KAAM,aAAcjB,GAAIC,IAC9ByB,EAAG,CAAC,CAAET,KAAM,aAAcjB,GAAIC,IAC9B0B,EAAG,CAAC,CAAEV,KAAM,UAAWjB,GAAIC,IAC3B2B,EAAG,CAAC,CAAEX,KAAM,SAAUjB,GAAIC,IAC1B4B,EAAG,CAAC,CAAEZ,KAAM,WAAYjB,GAAIC,KAE9B6B,GAAI,CACFC,EAAG,CAAC,CAAEd,KAAM,SAAUjB,GAAIC,IAC1B+B,EAAG,CAAC,CAAEf,KAAM,SAAUjB,GAAIC,IAC1BgC,EAAG,CAAC,CAAEhB,KAAM,SAAUjB,GAAIC,IAC1BiC,EAAG,CAAC,CAAEjB,KAAM,SAAUjB,GAAIC,IAC1BkC,EAAG,CAAC,CAAElB,KAAM,UAAWjB,GAAIC,IAC3BmC,EAAG,CAAC,CAAEnB,KAAM,YAAajB,GAAIC,KAE/BoC,GAAI,CACFC,EAAG,CAAC,CAAErB,KAAM,SAAUjB,GAAIC,IAC1BsC,EAAG,CAAC,CAAEtB,KAAM,SAAUjB,GAAIC,IAC1BuC,EAAG,CAAC,CAAEvB,KAAM,SAAUjB,GAAIC,IAC1BwC,EAAG,CAAC,CAAExB,KAAM,UAAWjB,GAAIC,IAC3ByC,EAAG,CAAC,CAAEzB,KAAM,UAAWjB,GAAIC,IAC3B0C,EAAG,CAAC,CAAE1B,KAAM,YAAajB,GAAIC,MAIlB2C,EAjKf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACRC,EADQ,KACCC,EADD,OAWqBF,mBAAS,MAX9B,mBAWRG,EAXQ,KAWIC,EAXJ,OAYmBJ,mBAAS,IAZ5B,mBAYRK,EAZQ,KAYGC,EAZH,OAaSN,mBAAS,MAblB,mBAaRO,EAbQ,KAaFC,EAbE,OAcWR,mBAAS,GAdpB,mBAcRS,EAdQ,KAcDC,EAdC,KAuBPC,EAAY,WAChB,IAAIC,EAAOP,EAAUF,GAChBS,IAAQA,EAlCjB,SAAiBC,GACf,IAAK,IAAIC,EAAID,EAAGE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACtC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADF,EAErB,CAACD,EAAGG,GAAIH,EAAGC,IAA3BD,EAAGC,GAFkC,KAE9BD,EAAGG,GAF2B,KAIxC,OAAOH,EA6BeO,CAAQC,OAAOC,KAAKrD,EAAKkC,MAC7CO,EAAS,GACTF,EAAQI,EAAKW,OACblB,EAAUF,GAAcS,EACxBN,EAAaM,IAmBTY,EAAW,SAACC,EAAMC,GACtB,IA/CWtD,EA+CLuD,EAAWF,EAAKC,GAItB,OAnDWtD,EAgDP,UAAG+B,EAAH,YAAiBI,EAAjB,YAAyBE,EAAzB,mBACMiB,EADN,aArES,SAACC,GAChB,OAAQA,GACR,KAJgB,EAIA,MAAO,YACvB,KAAKvE,EAAM,MAAO,OAClB,QACE,MAAM,QAAN,OAAeuE,EAAf,aAiEqBC,CAASD,GAD1B,KA/CJE,QAAQC,IAAI1D,GACZ6B,EAAQ8B,KAAK3D,GACb8B,EAAWD,GAgDH0B,GACR,KA3Ec,EA2EEhB,IAAa,MAC7B,KAAKvD,EAXLgD,EAAc,MAAOI,EAAQ,GAAIE,EAAS,GAWtB,MACpB,SAtBW,SAACsB,GAEZ,GADAtB,EAASD,EAAQuB,GACbvB,GAASxC,EAAKkC,GAAYI,GAAMQ,OAClC,MAAM,IAAIkB,MAAJ,eACI9B,EADJ,YACkBI,EADlB,yBACuCE,EADvC,YAmBCyB,CAAKP,KAMZQ,EAAS,KACb,GAAKhC,EAQE,CAAC,IAGGiC,GAHJ,WACL,IAAMX,EAAOxD,EAAKkC,GAAYI,GAAME,GAC9B4B,EAAO,GAFR,aAIH,IAAMC,EAAMF,EACRX,EAAKa,IACPD,EAAKN,KAAK,cAACQ,EAAA,EAAD,CAAkBC,QAASxF,EAAUsF,GACrCG,QAAS,SAACC,GAAD,OAAOlB,EAASC,EAAMa,IAD/B,SACsCA,GADzBA,KAH3B,IAASF,KAAKpF,EAAY,IAQ1BmF,EACE,eAAC9E,EAAD,CAAQI,KAAM4E,EAAKtB,OAAS,EAAI,UAAY,YAAa/C,QAASqE,EAAlE,UACE,kCAAKlC,EAAL,IAAkBI,EAAlB,IAAyBE,EAAzB,OACA,cAAC,IAAD,UAAgBgB,EAAKrD,UAdpB,OARU,CACf,IAAMuE,EAActB,OAAOC,KAAKrD,GAAM2E,KAAI,SAAAC,GAAG,OAC3C,cAACN,EAAA,EAAD,CAAkBE,QAAS,SAACC,GAAD,OA/C7BvC,EADc2C,EAgD6BD,EA/C3BzC,EAAc0C,GAC9BtC,EAAQH,EAAUyC,IAAM7E,EAAK6E,GAAG/B,aAASJ,IAF5B,IAACmC,GAgDZ,SAAgDD,GAAnCA,MAGfV,EACE,cAAC9E,EAAD,CAAQI,KAAK,UAAUO,QAAS2E,EAAhC,6BAqBJ,OACE,sBAAK5E,UAAU,YAAf,UACE,eAACgF,EAAA,EAAD,CAAQC,GAAG,QAAX,UACE,cAACD,EAAA,EAAOE,MAAR,sBACA,cAACC,EAAA,EAAD,CAAKnF,UAAU,UAAf,SACE,cAACmF,EAAA,EAAIC,KAAL,CAAUC,KAAK,oCAAf,yBAGHjB,EAPH,IAOW,uBACT,6BA3FKlC,EAAQ2C,KAAI,SAACS,EAAO5C,GAAR,OAAmB,6BAAiB4C,GAAR5C,YCtCpC6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e28f3e09.chunk.js","sourcesContent":["import './App.css';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\n\n// Bootstrap components.\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Card from 'react-bootstrap/Card';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\n// Possible responses to a dialog question, for cards.\nconst RESPONSES = {\n  yes: 'outline-success',\n  no: 'outline-danger',\n  ok: 'outline-secondary',\n};\n\n// Bytecode for what to do after a response. See interpreter at App.click.\n// any positive integer => increments the box by that much.\nconst NEXT_CARD = -1;\nconst STOP = -2;\nconst humanize = (bytecode) => {\n  switch (bytecode) {\n  case NEXT_CARD: return 'next card';\n  case STOP: return 'stop';\n  default:\n    return `down ${bytecode} box(es)`;\n  }\n};\n\n// Fisher-Yates shuffle in-place implementation.\nfunction shuffle(es) {\n  for (var i = es.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    [es[i], es[j]] = [es[j], es[i]];\n  }\n  return es;\n};\n\n// Encapsulated COIN bot interpreter.\nfunction App() {\n  let [history, setHistory] = useState([]);\n  const log = (text) => {\n    console.log(text);\n    history.push(text);\n    setHistory(history);\n  };\n  const renderHistory = () => {\n    return history.map((entry, index) => (<li key={index}>{entry}</li>));\n  };\n\n  let [factionKey, setFactionKey] = useState(null); // top-level faction key\n  let [deckState, setDeckState] = useState({}); // card index by faction.\n  let [card, setCard] = useState(null); // current card index\n  let [index, setIndex] = useState(0); // current instruction index\n\n  // Start using a faction.\n  const _start = (f) => {\n    factionKey = f; setFactionKey(f);\n    setCard(deckState[f] || DECK[f].length); _nextCard();\n  };\n\n  // Draw the next card. (Shuffle and reset when we reach the end.)\n  const _nextCard = () => {\n    var deck = deckState[factionKey]; // remaining cards in the faction deck.\n    if (!deck) { deck = shuffle(Object.keys(DECK[factionKey])); }\n    setIndex(0);\n    setCard(deck.pop());\n    deckState[factionKey] = deck;\n    setDeckState(deck);\n  };\n\n  // Increment the current instruction.\n  // Throw if this takes us past the end of the card.\n  const _inc = (inc) => {\n    setIndex(index + inc);\n    if (index >= DECK[factionKey][card].length) {\n      throw new Error(\n        `Card ${factionKey}/${card} doesn't have ${index} boxes.`);\n    }\n  };\n\n  // Stop using a faction.\n  const _stop = () => {\n    setFactionKey(null); setCard(0); setIndex(0);\n  };\n\n  // Evaluate a bytecode instruction in-context.\n  const evaluate = (inst, choice) => {\n    const bytecode = inst[choice];\n    log(`${factionKey}/${card}[${index}] ` +\n        `-> ${choice} (${humanize(bytecode)})`);\n\n    switch (bytecode) {\n    case NEXT_CARD: _nextCard(); break;\n    case STOP: _stop(); break;\n    default: _inc(bytecode); break;\n    }\n  };\n\n  // If we have no faction, show faction dialog.\n  // Otherwise, show the current instruction's dialog.\n  var dialog = null;\n  if (!factionKey) {\n    const factionBtns = Object.keys(DECK).map(idx => (\n      <Button key={idx} onClick={(e) => _start(idx)}>{idx}</Button>\n    ));\n\n    dialog = (\n      <Dialog type=\"primary\" options={factionBtns}>Faction to act?</Dialog>\n    );\n  } else {\n    const inst = DECK[factionKey][card][index];\n    const opts = [];\n    for (var k in RESPONSES) {\n      const key = k;\n      if (inst[key]) {\n        opts.push(<Button key={key} variant={RESPONSES[key]}\n                  onClick={(e) => evaluate(inst, key)}>{key}</Button>);\n      }\n    }\n\n    dialog = (\n      <Dialog type={opts.length > 1 ? 'primary' : 'secondary'} options={opts}>\n        <b>({factionKey}/{card}.{index})</b>\n        <ReactMarkdown>{inst.text}</ReactMarkdown>\n      </Dialog>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <Navbar bg=\"light\">\n        <Navbar.Brand>Flipper</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"https://github.com/blinks/flipper\">Source</Nav.Link>\n        </Nav>\n      </Navbar>\n      {dialog} <hr />\n      <ul>{renderHistory()}</ul>\n    </div>\n  );\n};\n\n// Consistent bot dialog box.\nfunction Dialog(props) {\n  return (\n    <Card border={props.type || 'secondary'}>\n      <Card.Body><Card.Text>{props.children}</Card.Text></Card.Body>\n      <Card.Footer>\n        <ButtonToolbar className=\"justify-content-between\">\n          {props.options}\n        </ButtonToolbar>\n      </Card.Footer>\n    </Card>\n  );\n};\n\nconst DECK = {\n  MG: {\n    A: [\n      { text: \"Die roll â‰¤ Available Troops?\",\n        yes: 1, no: NEXT_CARD },\n      { text: \"Cubes exceed all Active non-Base adversaries in any spaces?\",\n        yes: 1, no: 2 },\n      { text: \"#### Assault\\n- Select spaces using **Remove.**\", ok: STOP },\n      { text: \"Train.\", ok: STOP },\n    ],\n    B: [{ text: \"Train.\", ok: STOP }],\n    C: [{ text: \"Train.\", ok: STOP }],\n    D: [{ text: \"Secure.\", ok: STOP }],\n    E: [{ text: \"Recon.\", ok: STOP }],\n    F: [{ text: \"Assault.\", ok: STOP }],\n  },\n\n  CORP: {\n    G: [{ text: \"Logistics.\", ok: STOP }],\n    H: [{ text: \"Logistics.\", ok: STOP }],\n    J: [{ text: \"Logistics.\", ok: STOP }],\n    K: [{ text: \"Secure.\", ok: STOP }],\n    L: [{ text: \"Recon.\", ok: STOP }],\n    M: [{ text: \"Assault.\", ok: STOP }],\n  },\n  RD: {\n    N: [{ text: \"Rally.\", ok: STOP }],\n    P: [{ text: \"Rally.\", ok: STOP }],\n    Q: [{ text: \"Rally.\", ok: STOP }],\n    R: [{ text: \"March.\", ok: STOP }],\n    S: [{ text: \"Attack.\", ok: STOP }],\n    T: [{ text: \"Campaign.\", ok: STOP }],\n  },\n  CR: {\n    U: [{ text: \"Rally.\", ok: STOP }],\n    V: [{ text: \"Rally.\", ok: STOP }],\n    W: [{ text: \"Rally.\", ok: STOP }],\n    X: [{ text: \"Travel.\", ok: STOP }],\n    Y: [{ text: \"Attack.\", ok: STOP }],\n    Z: [{ text: \"Campaign.\", ok: STOP }],\n  },\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}